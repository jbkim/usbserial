
Arduino-usbserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000f5a  00000fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000119  00800116  00800116  00001004  2**0
                  ALLOC
  3 .debug_aranges 00000410  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000b84  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006a75  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000019d2  00000000  00000000  00008a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000054fa  00000000  00000000  0000a3df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000620  00000000  00000000  0000f8dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000028ab  00000000  00000000  0000fefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000274f  00000000  00000000  000127a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004b0  00000000  00000000  00014ef6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
uint8_t Endpoint_Discard_Stream(uint16_t Length
#if !defined(NO_STREAM_CALLBACKS)
                                , StreamCallbackPtr_t Callback
#endif
                                )
{
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>

	USB_IsInitialized = true;
}

void USB_ShutDown(void)
{
   2:	00 00       	nop
	
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
   4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
   6:	00 00       	nop
   8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
   a:	00 00       	nop
   c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
   e:	00 00       	nop
  10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
  12:	00 00       	nop
  14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
  16:	00 00       	nop
  18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
  1e:	00 00       	nop
  20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
  22:	00 00       	nop
  24:	93 c0       	rjmp	.+294    	; 0x14c <__bad_interrupt>
  26:	00 00       	nop
  28:	91 c0       	rjmp	.+290    	; 0x14c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c4       	rjmp	.+2216   	; 0x8d6 <__vector_11>
  2e:	00 00       	nop
  30:	18 c4       	rjmp	.+2096   	; 0x862 <__vector_12>
  32:	00 00       	nop
  34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
  36:	00 00       	nop
  38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
  3e:	00 00       	nop
  40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
  42:	00 00       	nop
  44:	83 c0       	rjmp	.+262    	; 0x14c <__bad_interrupt>
  46:	00 00       	nop
  48:	81 c0       	rjmp	.+258    	; 0x14c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7f c0       	rjmp	.+254    	; 0x14c <__bad_interrupt>
  4e:	00 00       	nop
  50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
  52:	00 00       	nop
  54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
  56:	00 00       	nop
  58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	df c0       	rjmp	.+446    	; 0x21c <__vector_23>
  5e:	00 00       	nop
  60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
  62:	00 00       	nop
  64:	73 c0       	rjmp	.+230    	; 0x14c <__bad_interrupt>
  66:	00 00       	nop
  68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
  6e:	00 00       	nop
  70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
  72:	00 00       	nop

00000074 <DeviceDescriptor>:
  74:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
  84:	00 01                                               ..

00000086 <ConfigurationDescriptor>:
  86:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  96:	01 00 05 24 00 01 10 04 24 02 06 05 24 06 00 01     ...$....$...$...
  a6:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  b6:	07 05 04 02 40 00 01 07 05 83 02 40 00 01           ....@......@..

000000c4 <LanguageString>:
  c4:	04 03 09 04                                         ....

000000c8 <ManufacturerString>:
  c8:	32 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     2.A.r.d.u.i.n.o.
  d8:	20 00 28 00 77 00 77 00 77 00 2e 00 61 00 72 00      .(.w.w.w...a.r.
  e8:	64 00 75 00 69 00 6e 00 6f 00 2e 00 63 00 63 00     d.u.i.n.o...c.c.
  f8:	29 00 00 00                                         )...

000000fc <ProductString>:
  fc:	18 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
 10c:	20 00 55 00 6e 00 6f 00 00 00                        .U.n.o...

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d2 e0       	ldi	r29, 0x02	; 2
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	ea e5       	ldi	r30, 0x5A	; 90
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	02 c0       	rjmp	.+4      	; 0x132 <.do_copy_data_start>

0000012e <.do_copy_data_loop>:
 12e:	05 90       	lpm	r0, Z+
 130:	0d 92       	st	X+, r0

00000132 <.do_copy_data_start>:
 132:	a6 31       	cpi	r26, 0x16	; 22
 134:	b1 07       	cpc	r27, r17
 136:	d9 f7       	brne	.-10     	; 0x12e <.do_copy_data_loop>

00000138 <__do_clear_bss>:
 138:	12 e0       	ldi	r17, 0x02	; 2
 13a:	a6 e1       	ldi	r26, 0x16	; 22
 13c:	b1 e0       	ldi	r27, 0x01	; 1
 13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
 140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
 142:	af 32       	cpi	r26, 0x2F	; 47
 144:	b1 07       	cpc	r27, r17
 146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
 148:	d4 d0       	rcall	.+424    	; 0x2f2 <main>
 14a:	05 c7       	rjmp	.+3594   	; 0xf56 <_exit>

0000014c <__bad_interrupt>:
 14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 15a:	84 89       	ldd	r24, Z+20	; 0x14
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	19 f0       	breq	.+6      	; 0x166 <EVENT_CDC_Device_LineEncodingChanged+0x18>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	21 f4       	brne	.+8      	; 0x16c <EVENT_CDC_Device_LineEncodingChanged+0x1e>
 164:	05 c0       	rjmp	.+10     	; 0x170 <EVENT_CDC_Device_LineEncodingChanged+0x22>
 166:	40 e3       	ldi	r20, 0x30	; 48
 168:	d4 2e       	mov	r13, r20
 16a:	04 c0       	rjmp	.+8      	; 0x174 <EVENT_CDC_Device_LineEncodingChanged+0x26>
 16c:	dd 24       	eor	r13, r13
 16e:	02 c0       	rjmp	.+4      	; 0x174 <EVENT_CDC_Device_LineEncodingChanged+0x26>
 170:	30 e2       	ldi	r19, 0x20	; 32
 172:	d3 2e       	mov	r13, r19
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);		
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 174:	83 89       	ldd	r24, Z+19	; 0x13
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	11 f4       	brne	.+4      	; 0x17e <EVENT_CDC_Device_LineEncodingChanged+0x30>
	  ConfigMask |= (1 << USBS1);
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	d8 2a       	or	r13, r24

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 17e:	85 89       	ldd	r24, Z+21	; 0x15
 180:	87 30       	cpi	r24, 0x07	; 7
 182:	31 f0       	breq	.+12     	; 0x190 <EVENT_CDC_Device_LineEncodingChanged+0x42>
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	31 f0       	breq	.+12     	; 0x194 <EVENT_CDC_Device_LineEncodingChanged+0x46>
 188:	86 30       	cpi	r24, 0x06	; 6
 18a:	31 f4       	brne	.+12     	; 0x198 <EVENT_CDC_Device_LineEncodingChanged+0x4a>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	03 c0       	rjmp	.+6      	; 0x196 <EVENT_CDC_Device_LineEncodingChanged+0x48>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	01 c0       	rjmp	.+2      	; 0x196 <EVENT_CDC_Device_LineEncodingChanged+0x48>
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	d8 2a       	or	r13, r24
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 198:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
 19c:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
 1a0:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
 1a4:	e7 84       	ldd	r14, Z+15	; 0x0f
 1a6:	f0 88       	ldd	r15, Z+16	; 0x10
 1a8:	01 89       	ldd	r16, Z+17	; 0x11
 1aa:	12 89       	ldd	r17, Z+18	; 0x12
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	e8 16       	cp	r14, r24
 1b0:	81 ee       	ldi	r24, 0xE1	; 225
 1b2:	f8 06       	cpc	r15, r24
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 07       	cpc	r16, r24
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	18 07       	cpc	r17, r24
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <EVENT_CDC_Device_LineEncodingChanged+0x76>
 1be:	20 e1       	ldi	r18, 0x10	; 16
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <EVENT_CDC_Device_LineEncodingChanged+0x94>
 1c4:	c8 01       	movw	r24, r16
 1c6:	b7 01       	movw	r22, r14
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	77 95       	ror	r23
 1ce:	67 95       	ror	r22
 1d0:	60 58       	subi	r22, 0x80	; 128
 1d2:	7b 47       	sbci	r23, 0x7B	; 123
 1d4:	81 4e       	sbci	r24, 0xE1	; 225
 1d6:	9f 4f       	sbci	r25, 0xFF	; 255
 1d8:	a8 01       	movw	r20, r16
 1da:	97 01       	movw	r18, r14
 1dc:	9a d6       	rcall	.+3380   	; 0xf12 <__udivmodsi4>
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	30 40       	sbci	r19, 0x00	; 0
 1e2:	30 93 cd 00 	sts	0x00CD, r19
 1e6:	20 93 cc 00 	sts	0x00CC, r18
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);	

	UCSR1C = ConfigMask;
 1ea:	d0 92 ca 00 	sts	0x00CA, r13
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	e8 16       	cp	r14, r24
 1f2:	81 ee       	ldi	r24, 0xE1	; 225
 1f4:	f8 06       	cpc	r15, r24
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 07       	cpc	r16, r24
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	18 07       	cpc	r17, r24
 1fe:	11 f0       	breq	.+4      	; 0x204 <EVENT_CDC_Device_LineEncodingChanged+0xb6>
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	01 c0       	rjmp	.+2      	; 0x206 <EVENT_CDC_Device_LineEncodingChanged+0xb8>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 20a:	88 e9       	ldi	r24, 0x98	; 152
 20c:	80 93 c9 00 	sts	0x00C9, r24
}
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	08 95       	ret

0000021c <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 230:	90 91 ce 00 	lds	r25, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
 234:	8e b3       	in	r24, 0x1e	; 30
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	f1 f4       	brne	.+60     	; 0x276 <__vector_23+0x5a>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 23a:	e0 91 99 01 	lds	r30, 0x0199
 23e:	f0 91 9a 01 	lds	r31, 0x019A
 242:	90 83       	st	Z, r25
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 244:	e0 91 99 01 	lds	r30, 0x0199
 248:	f0 91 9a 01 	lds	r31, 0x019A
 24c:	cf 01       	movw	r24, r30
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	90 93 9a 01 	sts	0x019A, r25
 254:	80 93 99 01 	sts	0x0199, r24
 258:	89 59       	subi	r24, 0x99	; 153
 25a:	91 40       	sbci	r25, 0x01	; 1
 25c:	21 f4       	brne	.+8      	; 0x266 <__vector_23+0x4a>
			  Buffer->In = Buffer->Buffer;
 25e:	89 e1       	ldi	r24, 0x19	; 25
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	92 83       	std	Z+2, r25	; 0x02
 264:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 266:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 268:	f8 94       	cli
			{
				Buffer->Count++;
 26a:	80 91 9d 01 	lds	r24, 0x019D
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 9d 01 	sts	0x019D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 274:	9f bf       	out	0x3f, r25	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <EVENT_CDC_Device_ControLineStateChanged>:
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);

	if (CurrentDTRState)
 28a:	fc 01       	movw	r30, r24
 28c:	85 85       	ldd	r24, Z+13	; 0x0d
 28e:	80 ff       	sbrs	r24, 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <EVENT_CDC_Device_ControLineStateChanged+0xc>
	  AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
 292:	5f 98       	cbi	0x0b, 7	; 11
 294:	08 95       	ret
	else
	  AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
 296:	5f 9a       	sbi	0x0b, 7	; 11
 298:	08 95       	ret

0000029a <EVENT_USB_Device_UnhandledControlRequest>:
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
}
 29e:	cf c5       	rjmp	.+2974   	; 0xe3e <CDC_Device_ProcessControlRequest>

000002a0 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	91 e0       	ldi	r25, 0x01	; 1
}
 2a4:	90 c5       	rjmp	.+2848   	; 0xdc6 <CDC_Device_ConfigureEndpoints>

000002a6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 2a6:	84 b7       	in	r24, 0x34	; 52
 2a8:	87 7f       	andi	r24, 0xF7	; 247
 2aa:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 2ac:	28 e1       	ldi	r18, 0x18	; 24
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	20 93 60 00 	sts	0x0060, r18
 2b6:	10 92 60 00 	sts	0x0060, r1
 2ba:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 2bc:	87 e6       	ldi	r24, 0x67	; 103
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 cd 00 	sts	0x00CD, r25
 2c4:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 2ce:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 2d2:	20 93 c9 00 	sts	0x00C9, r18
				
				DDRD  |= (1 << 3);
 2d6:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 2d8:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
 2da:	8a b1       	in	r24, 0x0a	; 10
 2dc:	80 63       	ori	r24, 0x30	; 48
 2de:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
 2e0:	8b b1       	in	r24, 0x0b	; 11
 2e2:	80 63       	ori	r24, 0x30	; 48
 2e4:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
 2e6:	b2 d2       	rcall	.+1380   	; 0x84c <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 2e8:	84 e0       	ldi	r24, 0x04	; 4
 2ea:	85 bd       	out	0x25, r24	; 37
	
	/* Pull target /RESET line high */
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
 2ec:	5f 9a       	sbi	0x0b, 7	; 11
	AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
 2ee:	57 9a       	sbi	0x0a, 7	; 10
}
 2f0:	08 95       	ret

000002f2 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
	SetupHardware();
 2fe:	d3 df       	rcall	.-90     	; 0x2a6 <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 300:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 302:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
 304:	8e e9       	ldi	r24, 0x9E	; 158
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	90 93 1f 02 	sts	0x021F, r25
 30c:	80 93 1e 02 	sts	0x021E, r24
				Buffer->Out = Buffer->Buffer;
 310:	90 93 21 02 	sts	0x0221, r25
 314:	80 93 20 02 	sts	0x0220, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 318:	2f bf       	out	0x3f, r18	; 63
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 31a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 31c:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
 31e:	89 e1       	ldi	r24, 0x19	; 25
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	90 93 9a 01 	sts	0x019A, r25
 326:	80 93 99 01 	sts	0x0199, r24
				Buffer->Out = Buffer->Buffer;
 32a:	90 93 9c 01 	sts	0x019C, r25
 32e:	80 93 9b 01 	sts	0x019B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 332:	2f bf       	out	0x3f, r18	; 63
	
	RingBuffer_InitBuffer(&USBtoUSART_Buffer);
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

	sei();
 334:	78 94       	sei
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;
 336:	ce e9       	ldi	r28, 0x9E	; 158
 338:	d1 e0       	ldi	r29, 0x01	; 1
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
 33a:	59 e1       	ldi	r21, 0x19	; 25
 33c:	e5 2e       	mov	r14, r21
 33e:	51 e0       	ldi	r21, 0x01	; 1
 340:	f5 2e       	mov	r15, r21
		{
			TIFR0 |= (1 << TOV0);

			if (USARTtoUSB_Buffer.Count) {
				LEDs_TurnOnLEDs(LEDMASK_TX);
				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
 342:	03 e0       	ldi	r16, 0x03	; 3
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 344:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 346:	f8 94       	cli
			{
				Count = Buffer->Count;
 348:	90 91 22 02 	lds	r25, 0x0222
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 34c:	8f bf       	out	0x3f, r24	; 63
	sei();

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
 34e:	90 38       	cpi	r25, 0x80	; 128
 350:	09 f1       	breq	.+66     	; 0x394 <__stack+0x95>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	94 d4       	rcall	.+2344   	; 0xc80 <CDC_Device_ReceiveByte>

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
 358:	97 fd       	sbrc	r25, 7
 35a:	1c c0       	rjmp	.+56     	; 0x394 <__stack+0x95>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 35c:	e0 91 1e 02 	lds	r30, 0x021E
 360:	f0 91 1f 02 	lds	r31, 0x021F
 364:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 366:	e0 91 1e 02 	lds	r30, 0x021E
 36a:	f0 91 1f 02 	lds	r31, 0x021F
 36e:	cf 01       	movw	r24, r30
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	90 93 1f 02 	sts	0x021F, r25
 376:	80 93 1e 02 	sts	0x021E, r24
 37a:	8e 51       	subi	r24, 0x1E	; 30
 37c:	92 40       	sbci	r25, 0x02	; 2
 37e:	11 f4       	brne	.+4      	; 0x384 <__stack+0x85>
			  Buffer->In = Buffer->Buffer;
 380:	d2 83       	std	Z+2, r29	; 0x02
 382:	c1 83       	std	Z+1, r28	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 384:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 386:	f8 94       	cli
			{
				Buffer->Count++;
 388:	80 91 22 02 	lds	r24, 0x0222
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	80 93 22 02 	sts	0x0222, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 392:	9f bf       	out	0x3f, r25	; 63
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 394:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 396:	f8 94       	cli
			{
				Count = Buffer->Count;
 398:	10 91 9d 01 	lds	r17, 0x019D
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 39c:	8f bf       	out	0x3f, r24	; 63
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
		}
		
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > BUFFER_NEARLY_FULL))
 39e:	a8 99       	sbic	0x15, 0	; 21
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <__stack+0xa9>
 3a2:	11 36       	cpi	r17, 0x61	; 97
 3a4:	08 f4       	brcc	.+2      	; 0x3a8 <__stack+0xa9>
 3a6:	43 c0       	rjmp	.+134    	; 0x42e <__stack+0x12f>
		{
			TIFR0 |= (1 << TOV0);
 3a8:	a8 9a       	sbi	0x15, 0	; 21

			if (USARTtoUSB_Buffer.Count) {
 3aa:	80 91 9d 01 	lds	r24, 0x019D
 3ae:	88 23       	and	r24, r24
 3b0:	01 f1       	breq	.+64     	; 0x3f2 <__stack+0xf3>
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
 3b2:	5d 98       	cbi	0x0b, 5	; 11
				LEDs_TurnOnLEDs(LEDMASK_TX);
				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
 3b4:	00 93 16 01 	sts	0x0116, r16
 3b8:	1c c0       	rjmp	.+56     	; 0x3f2 <__stack+0xf3>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 3ba:	e0 91 9b 01 	lds	r30, 0x019B
 3be:	f0 91 9c 01 	lds	r31, 0x019C
 3c2:	61 91       	ld	r22, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 3c4:	f0 93 9c 01 	sts	0x019C, r31
 3c8:	e0 93 9b 01 	sts	0x019B, r30
 3cc:	e9 59       	subi	r30, 0x99	; 153
 3ce:	f1 40       	sbci	r31, 0x01	; 1
 3d0:	21 f4       	brne	.+8      	; 0x3da <__stack+0xdb>
			  Buffer->Out = Buffer->Buffer;
 3d2:	f0 92 9c 01 	sts	0x019C, r15
 3d6:	e0 92 9b 01 	sts	0x019B, r14

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3dc:	f8 94       	cli
			{
				Buffer->Count--;
 3de:	80 91 9d 01 	lds	r24, 0x019D
 3e2:	81 50       	subi	r24, 0x01	; 1
 3e4:	80 93 9d 01 	sts	0x019D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3e8:	9f bf       	out	0x3f, r25	; 63
			}

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	ae d4       	rcall	.+2396   	; 0xd4c <CDC_Device_SendByte>
 3f0:	11 50       	subi	r17, 0x01	; 1
				LEDs_TurnOnLEDs(LEDMASK_TX);
				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
			}

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
 3f2:	11 23       	and	r17, r17
 3f4:	11 f7       	brne	.-60     	; 0x3ba <__stack+0xbb>
			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
			  
			/* Turn off TX LED(s) once the TX pulse period has elapsed */
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
 3f6:	80 91 16 01 	lds	r24, 0x0116
 3fa:	88 23       	and	r24, r24
 3fc:	51 f0       	breq	.+20     	; 0x412 <__stack+0x113>
 3fe:	80 91 16 01 	lds	r24, 0x0116
 402:	81 50       	subi	r24, 0x01	; 1
 404:	80 93 16 01 	sts	0x0116, r24
 408:	80 91 16 01 	lds	r24, 0x0116
 40c:	88 23       	and	r24, r24
 40e:	09 f4       	brne	.+2      	; 0x412 <__stack+0x113>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
 410:	5d 9a       	sbi	0x0b, 5	; 11
			  LEDs_TurnOffLEDs(LEDMASK_TX);

			/* Turn off RX LED(s) once the RX pulse period has elapsed */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
 412:	80 91 17 01 	lds	r24, 0x0117
 416:	88 23       	and	r24, r24
 418:	51 f0       	breq	.+20     	; 0x42e <__stack+0x12f>
 41a:	80 91 17 01 	lds	r24, 0x0117
 41e:	81 50       	subi	r24, 0x01	; 1
 420:	80 93 17 01 	sts	0x0117, r24
 424:	80 91 17 01 	lds	r24, 0x0117
 428:	88 23       	and	r24, r24
 42a:	09 f4       	brne	.+2      	; 0x42e <__stack+0x12f>
 42c:	5c 9a       	sbi	0x0b, 4	; 11
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 42e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 430:	f8 94       	cli
			{
				Count = Buffer->Count;
 432:	90 91 22 02 	lds	r25, 0x0222
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 436:	8f bf       	out	0x3f, r24	; 63
			  LEDs_TurnOffLEDs(LEDMASK_RX);
		}
		
		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer))) {
 438:	99 23       	and	r25, r25
 43a:	09 f1       	breq	.+66     	; 0x47e <__stack+0x17f>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 43c:	e0 91 20 02 	lds	r30, 0x0220
 440:	f0 91 21 02 	lds	r31, 0x0221
 444:	21 91       	ld	r18, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 446:	f0 93 21 02 	sts	0x0221, r31
 44a:	e0 93 20 02 	sts	0x0220, r30
 44e:	ee 51       	subi	r30, 0x1E	; 30
 450:	f2 40       	sbci	r31, 0x02	; 2
 452:	21 f4       	brne	.+8      	; 0x45c <__stack+0x15d>
			  Buffer->Out = Buffer->Buffer;
 454:	d0 93 21 02 	sts	0x0221, r29
 458:	c0 93 20 02 	sts	0x0220, r28

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 45c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 45e:	f8 94       	cli
			{
				Buffer->Count--;
 460:	80 91 22 02 	lds	r24, 0x0222
 464:	81 50       	subi	r24, 0x01	; 1
 466:	80 93 22 02 	sts	0x0222, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 46a:	9f bf       	out	0x3f, r25	; 63
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 46c:	80 91 c8 00 	lds	r24, 0x00C8
 470:	85 ff       	sbrs	r24, 5
 472:	fc cf       	rjmp	.-8      	; 0x46c <__stack+0x16d>
				UDR1 = DataByte;
 474:	20 93 ce 00 	sts	0x00CE, r18
				PORTD |= LEDS_ALL_LEDS;
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
 478:	5c 98       	cbi	0x0b, 4	; 11
		  Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
		  	
		  	LEDs_TurnOnLEDs(LEDMASK_RX);
			PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
 47a:	00 93 17 01 	sts	0x0117, r16
		}
		
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	55 d4       	rcall	.+2218   	; 0xd2e <CDC_Device_USBTask>
		USB_USBTask();
 484:	ea d3       	rcall	.+2004   	; 0xc5a <USB_USBTask>
 486:	5e cf       	rjmp	.-324    	; 0x344 <__stack+0x45>

00000488 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    void** const DescriptorAddress)
{
 488:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 48a:	92 30       	cpi	r25, 0x02	; 2
 48c:	49 f0       	breq	.+18     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x18>
 48e:	93 30       	cpi	r25, 0x03	; 3
 490:	61 f0       	breq	.+24     	; 0x4aa <CALLBACK_USB_GetDescriptor+0x22>
 492:	91 30       	cpi	r25, 0x01	; 1
 494:	f9 f4       	brne	.+62     	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x4c>
 496:	e4 e7       	ldi	r30, 0x74	; 116
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	22 e1       	ldi	r18, 0x12	; 18
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	1e c0       	rjmp	.+60     	; 0x4dc <CALLBACK_USB_GetDescriptor+0x54>
 4a0:	e6 e8       	ldi	r30, 0x86	; 134
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	2e e3       	ldi	r18, 0x3E	; 62
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	19 c0       	rjmp	.+50     	; 0x4dc <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	49 f0       	breq	.+18     	; 0x4c0 <CALLBACK_USB_GetDescriptor+0x38>
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	18 f0       	brcs	.+6      	; 0x4b8 <CALLBACK_USB_GetDescriptor+0x30>
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	79 f4       	brne	.+30     	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x4c>
 4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4b8:	e4 ec       	ldi	r30, 0xC4	; 196
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	84 91       	lpm	r24, Z+
 4be:	07 c0       	rjmp	.+14     	; 0x4ce <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4c0:	e8 ec       	ldi	r30, 0xC8	; 200
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	84 91       	lpm	r24, Z+
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4c8:	ec ef       	ldi	r30, 0xFC	; 252
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	84 91       	lpm	r24, Z+
 4ce:	28 2f       	mov	r18, r24
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <CALLBACK_USB_GetDescriptor+0x54>
 4d4:	e0 e0       	ldi	r30, 0x00	; 0
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	30 e0       	ldi	r19, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
 4dc:	ed 93       	st	X+, r30
 4de:	fc 93       	st	X, r31
	return Size;
}
 4e0:	c9 01       	movw	r24, r18
 4e2:	08 95       	ret

000004e4 <Endpoint_BytesToEPSizeMaskDynamic>:
#if !defined(FIXED_CONTROL_ENDPOINT_SIZE)
uint8_t USB_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
 4e4:	28 e0       	ldi	r18, 0x08	; 8
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <Endpoint_BytesToEPSizeMaskDynamic+0xe>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
				{
					MaskVal++;
 4ec:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 4ee:	22 0f       	add	r18, r18
 4f0:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
 4f2:	28 17       	cp	r18, r24
 4f4:	39 07       	cpc	r19, r25
 4f6:	d0 f3       	brcs	.-12     	; 0x4ec <Endpoint_BytesToEPSizeMaskDynamic+0x8>
	return Endpoint_BytesToEPSizeMask(Size);
}
 4f8:	84 2f       	mov	r24, r20
 4fa:	82 95       	swap	r24
 4fc:	80 7f       	andi	r24, 0xF0	; 240
 4fe:	08 95       	ret

00000500 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 500:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 504:	80 91 eb 00 	lds	r24, 0x00EB
 508:	81 60       	ori	r24, 0x01	; 1
 50a:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 50e:	10 92 ed 00 	sts	0x00ED, r1

	UECFG0X = UECFG0XData;
 512:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 516:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 51a:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 51e:	88 1f       	adc	r24, r24
 520:	88 27       	eor	r24, r24
 522:	88 1f       	adc	r24, r24
 524:	08 95       	ret

00000526 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
 526:	10 92 f4 00 	sts	0x00F4, r1
 52a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 52c:	90 93 e9 00 	sts	0x00E9, r25

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
 530:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
 534:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
 538:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 53c:	80 91 eb 00 	lds	r24, 0x00EB
 540:	8e 7f       	andi	r24, 0xFE	; 254
 542:	80 93 eb 00 	sts	0x00EB, r24

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 546:	9f 5f       	subi	r25, 0xFF	; 255
 548:	95 30       	cpi	r25, 0x05	; 5
 54a:	81 f7       	brne	.-32     	; 0x52c <Endpoint_ClearEndpoints+0x6>
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 54c:	08 95       	ret

0000054e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 54e:	80 91 27 02 	lds	r24, 0x0227
 552:	88 23       	and	r24, r24
 554:	8c f4       	brge	.+34     	; 0x578 <Endpoint_ClearStatusStage+0x2a>
 556:	03 c0       	rjmp	.+6      	; 0x55e <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 558:	8e b3       	in	r24, 0x1e	; 30
 55a:	88 23       	and	r24, r24
 55c:	b1 f0       	breq	.+44     	; 0x58a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 55e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 562:	82 ff       	sbrs	r24, 2
 564:	f9 cf       	rjmp	.-14     	; 0x558 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 566:	80 91 e8 00 	lds	r24, 0x00E8
 56a:	8b 77       	andi	r24, 0x7B	; 123
 56c:	80 93 e8 00 	sts	0x00E8, r24
 570:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 572:	8e b3       	in	r24, 0x1e	; 30
 574:	88 23       	and	r24, r24
 576:	49 f0       	breq	.+18     	; 0x58a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 578:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 57c:	80 ff       	sbrs	r24, 0
 57e:	f9 cf       	rjmp	.-14     	; 0x572 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 580:	80 91 e8 00 	lds	r24, 0x00E8
 584:	8e 77       	andi	r24, 0x7E	; 126
 586:	80 93 e8 00 	sts	0x00E8, r24
 58a:	08 95       	ret

0000058c <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
 58c:	94 e6       	ldi	r25, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 58e:	80 91 ec 00 	lds	r24, 0x00EC
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 592:	80 ff       	sbrs	r24, 0
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <Endpoint_WaitUntilReady+0x14>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 596:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 59a:	80 ff       	sbrs	r24, 0
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <Endpoint_WaitUntilReady+0x1c>
 59e:	23 c0       	rjmp	.+70     	; 0x5e6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5a0:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 5a4:	82 fd       	sbrc	r24, 2
 5a6:	1f c0       	rjmp	.+62     	; 0x5e6 <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 5a8:	8e b3       	in	r24, 0x1e	; 30
 5aa:	88 23       	and	r24, r24
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <Endpoint_WaitUntilReady+0x26>
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 5b2:	8e b3       	in	r24, 0x1e	; 30
 5b4:	85 30       	cpi	r24, 0x05	; 5
 5b6:	11 f4       	brne	.+4      	; 0x5bc <Endpoint_WaitUntilReady+0x30>
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 5bc:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 5c0:	85 ff       	sbrs	r24, 5
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <Endpoint_WaitUntilReady+0x3c>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
 5c8:	80 91 e1 00 	lds	r24, 0x00E1
 5cc:	82 ff       	sbrs	r24, 2
 5ce:	df cf       	rjmp	.-66     	; 0x58e <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
 5d0:	80 91 e1 00 	lds	r24, 0x00E1
 5d4:	8b 7f       	andi	r24, 0xFB	; 251
 5d6:	80 93 e1 00 	sts	0x00E1, r24

			if (!(TimeoutMSRem--))
 5da:	99 23       	and	r25, r25
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <Endpoint_WaitUntilReady+0x56>
 5de:	84 e0       	ldi	r24, 0x04	; 4
 5e0:	08 95       	ret
 5e2:	91 50       	subi	r25, 0x01	; 1
 5e4:	d4 cf       	rjmp	.-88     	; 0x58e <Endpoint_WaitUntilReady+0x2>
 5e6:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 5e8:	08 95       	ret

000005ea <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 5ea:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 5ec:	40 91 2d 02 	lds	r20, 0x022D
 5f0:	50 91 2e 02 	lds	r21, 0x022E
 5f4:	46 17       	cp	r20, r22
 5f6:	57 07       	cpc	r21, r23
 5f8:	18 f4       	brcc	.+6      	; 0x600 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 5fa:	f9 01       	movw	r30, r18
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	38 c0       	rjmp	.+112    	; 0x670 <Endpoint_Write_Control_Stream_LE+0x86>
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 600:	61 15       	cp	r22, r1
 602:	71 05       	cpc	r23, r1
 604:	11 f0       	breq	.+4      	; 0x60a <Endpoint_Write_Control_Stream_LE+0x20>
 606:	ab 01       	movw	r20, r22
 608:	f8 cf       	rjmp	.-16     	; 0x5fa <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 60a:	80 91 e8 00 	lds	r24, 0x00E8
 60e:	8e 77       	andi	r24, 0x7E	; 126
 610:	80 93 e8 00 	sts	0x00E8, r24
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	f0 cf       	rjmp	.-32     	; 0x5fa <Endpoint_Write_Control_Stream_LE+0x10>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 61a:	80 91 e8 00 	lds	r24, 0x00E8
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
 61e:	83 ff       	sbrs	r24, 3
 620:	02 c0       	rjmp	.+4      	; 0x626 <Endpoint_Write_Control_Stream_LE+0x3c>
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 626:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 62a:	82 fd       	sbrc	r24, 2
 62c:	2d c0       	rjmp	.+90     	; 0x688 <Endpoint_Write_Control_Stream_LE+0x9e>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 62e:	8e b3       	in	r24, 0x1e	; 30
 630:	88 23       	and	r24, r24
 632:	81 f1       	breq	.+96     	; 0x694 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 634:	8e b3       	in	r24, 0x1e	; 30
 636:	85 30       	cpi	r24, 0x05	; 5
 638:	79 f1       	breq	.+94     	; 0x698 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 63a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 63e:	80 ff       	sbrs	r24, 0
 640:	17 c0       	rjmp	.+46     	; 0x670 <Endpoint_Write_Control_Stream_LE+0x86>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 642:	90 91 f2 00 	lds	r25, 0x00F2
 646:	06 c0       	rjmp	.+12     	; 0x654 <Endpoint_Write_Control_Stream_LE+0x6a>
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 648:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 64a:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 64e:	41 50       	subi	r20, 0x01	; 1
 650:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 652:	9f 5f       	subi	r25, 0xFF	; 255
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 654:	41 15       	cp	r20, r1
 656:	51 05       	cpc	r21, r1
 658:	11 f0       	breq	.+4      	; 0x65e <Endpoint_Write_Control_Stream_LE+0x74>
 65a:	98 30       	cpi	r25, 0x08	; 8
 65c:	a8 f3       	brcs	.-22     	; 0x648 <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 65e:	20 e0       	ldi	r18, 0x00	; 0
 660:	98 30       	cpi	r25, 0x08	; 8
 662:	09 f4       	brne	.+2      	; 0x666 <Endpoint_Write_Control_Stream_LE+0x7c>
 664:	21 e0       	ldi	r18, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 666:	80 91 e8 00 	lds	r24, 0x00E8
 66a:	8e 77       	andi	r24, 0x7E	; 126
 66c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 670:	41 15       	cp	r20, r1
 672:	51 05       	cpc	r21, r1
 674:	91 f6       	brne	.-92     	; 0x61a <Endpoint_Write_Control_Stream_LE+0x30>
 676:	22 23       	and	r18, r18
 678:	81 f6       	brne	.-96     	; 0x61a <Endpoint_Write_Control_Stream_LE+0x30>
 67a:	06 c0       	rjmp	.+12     	; 0x688 <Endpoint_Write_Control_Stream_LE+0x9e>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 67c:	8e b3       	in	r24, 0x1e	; 30
 67e:	88 23       	and	r24, r24
 680:	49 f0       	breq	.+18     	; 0x694 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 682:	8e b3       	in	r24, 0x1e	; 30
 684:	85 30       	cpi	r24, 0x05	; 5
 686:	41 f0       	breq	.+16     	; 0x698 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 688:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 68c:	82 ff       	sbrs	r24, 2
 68e:	f6 cf       	rjmp	.-20     	; 0x67c <Endpoint_Write_Control_Stream_LE+0x92>
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	08 95       	ret
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	08 95       	ret
 698:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 69a:	08 95       	ret

0000069c <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 69c:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 69e:	40 91 2d 02 	lds	r20, 0x022D
 6a2:	50 91 2e 02 	lds	r21, 0x022E
 6a6:	46 17       	cp	r20, r22
 6a8:	57 07       	cpc	r21, r23
 6aa:	10 f4       	brcc	.+4      	; 0x6b0 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	3b c0       	rjmp	.+118    	; 0x726 <Endpoint_Write_Control_PStream_LE+0x8a>
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 6b0:	61 15       	cp	r22, r1
 6b2:	71 05       	cpc	r23, r1
 6b4:	11 f0       	breq	.+4      	; 0x6ba <Endpoint_Write_Control_PStream_LE+0x1e>
 6b6:	ab 01       	movw	r20, r22
 6b8:	f9 cf       	rjmp	.-14     	; 0x6ac <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6ba:	80 91 e8 00 	lds	r24, 0x00E8
 6be:	8e 77       	andi	r24, 0x7E	; 126
 6c0:	80 93 e8 00 	sts	0x00E8, r24
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	f1 cf       	rjmp	.-30     	; 0x6ac <Endpoint_Write_Control_PStream_LE+0x10>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6ca:	80 91 e8 00 	lds	r24, 0x00E8
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
 6ce:	83 ff       	sbrs	r24, 3
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0x3a>
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6d6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 6da:	82 fd       	sbrc	r24, 2
 6dc:	30 c0       	rjmp	.+96     	; 0x73e <Endpoint_Write_Control_PStream_LE+0xa2>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6de:	8e b3       	in	r24, 0x1e	; 30
 6e0:	88 23       	and	r24, r24
 6e2:	99 f1       	breq	.+102    	; 0x74a <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6e4:	8e b3       	in	r24, 0x1e	; 30
 6e6:	85 30       	cpi	r24, 0x05	; 5
 6e8:	91 f1       	breq	.+100    	; 0x74e <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 6ea:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 6ee:	80 ff       	sbrs	r24, 0
 6f0:	1a c0       	rjmp	.+52     	; 0x726 <Endpoint_Write_Control_PStream_LE+0x8a>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 6f2:	80 91 f2 00 	lds	r24, 0x00F2
 6f6:	09 c0       	rjmp	.+18     	; 0x70a <Endpoint_Write_Control_PStream_LE+0x6e>
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 6f8:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6fa:	2f 5f       	subi	r18, 0xFF	; 255
 6fc:	3f 4f       	sbci	r19, 0xFF	; 255
 6fe:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 700:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 704:	41 50       	subi	r20, 0x01	; 1
 706:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 708:	8f 5f       	subi	r24, 0xFF	; 255
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 70a:	41 15       	cp	r20, r1
 70c:	51 05       	cpc	r21, r1
 70e:	11 f0       	breq	.+4      	; 0x714 <Endpoint_Write_Control_PStream_LE+0x78>
 710:	88 30       	cpi	r24, 0x08	; 8
 712:	90 f3       	brcs	.-28     	; 0x6f8 <Endpoint_Write_Control_PStream_LE+0x5c>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	88 30       	cpi	r24, 0x08	; 8
 718:	09 f4       	brne	.+2      	; 0x71c <Endpoint_Write_Control_PStream_LE+0x80>
 71a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 71c:	80 91 e8 00 	lds	r24, 0x00E8
 720:	8e 77       	andi	r24, 0x7E	; 126
 722:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 726:	41 15       	cp	r20, r1
 728:	51 05       	cpc	r21, r1
 72a:	79 f6       	brne	.-98     	; 0x6ca <Endpoint_Write_Control_PStream_LE+0x2e>
 72c:	99 23       	and	r25, r25
 72e:	69 f6       	brne	.-102    	; 0x6ca <Endpoint_Write_Control_PStream_LE+0x2e>
 730:	06 c0       	rjmp	.+12     	; 0x73e <Endpoint_Write_Control_PStream_LE+0xa2>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 732:	8e b3       	in	r24, 0x1e	; 30
 734:	88 23       	and	r24, r24
 736:	49 f0       	breq	.+18     	; 0x74a <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 738:	8e b3       	in	r24, 0x1e	; 30
 73a:	85 30       	cpi	r24, 0x05	; 5
 73c:	41 f0       	breq	.+16     	; 0x74e <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 73e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 742:	82 ff       	sbrs	r24, 2
 744:	f6 cf       	rjmp	.-20     	; 0x732 <Endpoint_Write_Control_PStream_LE+0x96>
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	08 95       	ret
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	08 95       	ret
 74e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 750:	08 95       	ret

00000752 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
 752:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 754:	61 15       	cp	r22, r1
 756:	71 05       	cpc	r23, r1
 758:	29 f4       	brne	.+10     	; 0x764 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 75a:	80 91 e8 00 	lds	r24, 0x00E8
 75e:	8b 77       	andi	r24, 0x7B	; 123
 760:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 764:	f9 01       	movw	r30, r18
 766:	20 c0       	rjmp	.+64     	; 0x7a8 <Endpoint_Read_Control_Stream_LE+0x56>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 768:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
 76c:	83 ff       	sbrs	r24, 3
 76e:	02 c0       	rjmp	.+4      	; 0x774 <Endpoint_Read_Control_Stream_LE+0x22>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
 774:	8e b3       	in	r24, 0x1e	; 30
 776:	88 23       	and	r24, r24
 778:	39 f1       	breq	.+78     	; 0x7c8 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 77a:	8e b3       	in	r24, 0x1e	; 30
 77c:	85 30       	cpi	r24, 0x05	; 5
 77e:	31 f1       	breq	.+76     	; 0x7cc <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 780:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
 784:	82 ff       	sbrs	r24, 2
 786:	f0 cf       	rjmp	.-32     	; 0x768 <Endpoint_Read_Control_Stream_LE+0x16>
 788:	06 c0       	rjmp	.+12     	; 0x796 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 78a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 78e:	81 93       	st	Z+, r24
				Length--;
 790:	61 50       	subi	r22, 0x01	; 1
 792:	70 40       	sbci	r23, 0x00	; 0
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 794:	21 f0       	breq	.+8      	; 0x79e <Endpoint_Read_Control_Stream_LE+0x4c>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 796:	80 91 f2 00 	lds	r24, 0x00F2
 79a:	88 23       	and	r24, r24
 79c:	b1 f7       	brne	.-20     	; 0x78a <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 79e:	80 91 e8 00 	lds	r24, 0x00E8
 7a2:	8b 77       	andi	r24, 0x7B	; 123
 7a4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
 7a8:	61 15       	cp	r22, r1
 7aa:	71 05       	cpc	r23, r1
 7ac:	e9 f6       	brne	.-70     	; 0x768 <Endpoint_Read_Control_Stream_LE+0x16>
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <Endpoint_Read_Control_Stream_LE+0x6a>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 7b0:	8e b3       	in	r24, 0x1e	; 30
 7b2:	88 23       	and	r24, r24
 7b4:	49 f0       	breq	.+18     	; 0x7c8 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 7b6:	8e b3       	in	r24, 0x1e	; 30
 7b8:	85 30       	cpi	r24, 0x05	; 5
 7ba:	41 f0       	breq	.+16     	; 0x7cc <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 7bc:	80 91 e8 00 	lds	r24, 0x00E8
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 7c0:	80 ff       	sbrs	r24, 0
 7c2:	f6 cf       	rjmp	.-20     	; 0x7b0 <Endpoint_Read_Control_Stream_LE+0x5e>
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	08 95       	ret
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	08 95       	ret
 7cc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
 7ce:	08 95       	ret

000007d0 <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
 7d0:	42 d0       	rcall	.+132    	; 0x856 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7d2:	44 d0       	rcall	.+136    	; 0x85c <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
 7d4:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
 7d6:	10 92 25 02 	sts	0x0225, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 7da:	10 92 24 02 	sts	0x0224, r1
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 7de:	10 92 23 02 	sts	0x0223, r1
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7e2:	84 e0       	ldi	r24, 0x04	; 4
 7e4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 7e6:	89 b5       	in	r24, 0x29	; 41
 7e8:	82 60       	ori	r24, 0x02	; 2
 7ea:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 7ec:	09 b4       	in	r0, 0x29	; 41
 7ee:	00 fe       	sbrs	r0, 0
 7f0:	fd cf       	rjmp	.-6      	; 0x7ec <USB_ResetInterface+0x1c>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 7f2:	80 91 d8 00 	lds	r24, 0x00D8
				
				USBCON = (Temp & ~(1 << USBE));
 7f6:	98 2f       	mov	r25, r24
 7f8:	9f 77       	andi	r25, 0x7F	; 127
 7fa:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 7fe:	80 68       	ori	r24, 0x80	; 128
 800:	80 93 d8 00 	sts	0x00D8, r24
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 804:	80 91 63 00 	lds	r24, 0x0063
 808:	8e 7f       	andi	r24, 0xFE	; 254
 80a:	80 93 63 00 	sts	0x0063, r24
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 80e:	80 91 d8 00 	lds	r24, 0x00D8
 812:	8f 7d       	andi	r24, 0xDF	; 223
 814:	80 93 d8 00 	sts	0x00D8, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 818:	80 91 e0 00 	lds	r24, 0x00E0
 81c:	8e 7f       	andi	r24, 0xFE	; 254
 81e:	80 93 e0 00 	sts	0x00E0, r24
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 822:	80 91 e1 00 	lds	r24, 0x00E1
 826:	8e 7f       	andi	r24, 0xFE	; 254
 828:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPEND);
 82c:	80 91 e2 00 	lds	r24, 0x00E2
 830:	81 60       	ori	r24, 0x01	; 1
 832:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Clear(USB_INT_EORSTI);
 836:	80 91 e1 00 	lds	r24, 0x00E1
 83a:	87 7f       	andi	r24, 0xF7	; 247
 83c:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_EORSTI);
 840:	80 91 e2 00 	lds	r24, 0x00E2
 844:	88 60       	ori	r24, 0x08	; 8
 846:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
 84a:	08 95       	ret

0000084c <USB_Init>:
		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
 84c:	c1 df       	rcall	.-126    	; 0x7d0 <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	80 93 26 02 	sts	0x0226, r24
}
 854:	08 95       	ret

00000856 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 856:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 85a:	08 95       	ret

0000085c <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 85c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 860:	08 95       	ret

00000862 <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 862:	1f 92       	push	r1
 864:	0f 92       	push	r0
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	0f 92       	push	r0
 86a:	11 24       	eor	r1, r1
 86c:	1f 93       	push	r17
 86e:	2f 93       	push	r18
 870:	3f 93       	push	r19
 872:	4f 93       	push	r20
 874:	5f 93       	push	r21
 876:	6f 93       	push	r22
 878:	7f 93       	push	r23
 87a:	8f 93       	push	r24
 87c:	9f 93       	push	r25
 87e:	af 93       	push	r26
 880:	bf 93       	push	r27
 882:	ef 93       	push	r30
 884:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 886:	e9 ee       	ldi	r30, 0xE9	; 233
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	10 81       	ld	r17, Z
 88c:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 88e:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint(); 

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
 890:	e0 ef       	ldi	r30, 0xF0	; 240
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	87 7f       	andi	r24, 0xF7	; 247
 898:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
 89a:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
 89c:	c3 d0       	rcall	.+390    	; 0xa24 <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
 89e:	f8 94       	cli
 8a0:	a9 ee       	ldi	r26, 0xE9	; 233
 8a2:	b0 e0       	ldi	r27, 0x00	; 0
 8a4:	1c 92       	st	X, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
 8a6:	e0 ef       	ldi	r30, 0xF0	; 240
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	80 81       	ld	r24, Z
 8ac:	88 60       	ori	r24, 0x08	; 8
 8ae:	80 83       	st	Z, r24
 8b0:	1c 93       	st	X, r17
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 8b2:	ff 91       	pop	r31
 8b4:	ef 91       	pop	r30
 8b6:	bf 91       	pop	r27
 8b8:	af 91       	pop	r26
 8ba:	9f 91       	pop	r25
 8bc:	8f 91       	pop	r24
 8be:	7f 91       	pop	r23
 8c0:	6f 91       	pop	r22
 8c2:	5f 91       	pop	r21
 8c4:	4f 91       	pop	r20
 8c6:	3f 91       	pop	r19
 8c8:	2f 91       	pop	r18
 8ca:	1f 91       	pop	r17
 8cc:	0f 90       	pop	r0
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	0f 90       	pop	r0
 8d2:	1f 90       	pop	r1
 8d4:	18 95       	reti

000008d6 <__vector_11>:
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 8d6:	1f 92       	push	r1
 8d8:	0f 92       	push	r0
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	0f 92       	push	r0
 8de:	11 24       	eor	r1, r1
 8e0:	2f 93       	push	r18
 8e2:	3f 93       	push	r19
 8e4:	4f 93       	push	r20
 8e6:	5f 93       	push	r21
 8e8:	6f 93       	push	r22
 8ea:	7f 93       	push	r23
 8ec:	8f 93       	push	r24
 8ee:	9f 93       	push	r25
 8f0:	af 93       	push	r26
 8f2:	bf 93       	push	r27
 8f4:	ef 93       	push	r30
 8f6:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 8f8:	80 91 e1 00 	lds	r24, 0x00E1
 8fc:	80 ff       	sbrs	r24, 0
 8fe:	1b c0       	rjmp	.+54     	; 0x936 <__vector_11+0x60>
 900:	80 91 e2 00 	lds	r24, 0x00E2
 904:	80 ff       	sbrs	r24, 0
 906:	17 c0       	rjmp	.+46     	; 0x936 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 908:	80 91 e1 00 	lds	r24, 0x00E1
 90c:	8e 7f       	andi	r24, 0xFE	; 254
 90e:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
 912:	80 91 e2 00 	lds	r24, 0x00E2
 916:	8e 7f       	andi	r24, 0xFE	; 254
 918:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
 91c:	80 91 e2 00 	lds	r24, 0x00E2
 920:	80 61       	ori	r24, 0x10	; 16
 922:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 926:	80 91 d8 00 	lds	r24, 0x00D8
 92a:	80 62       	ori	r24, 0x20	; 32
 92c:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 930:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 932:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 934:	91 d1       	rcall	.+802    	; 0xc58 <USB_Event_Stub>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 936:	80 91 e1 00 	lds	r24, 0x00E1
 93a:	84 ff       	sbrs	r24, 4
 93c:	29 c0       	rjmp	.+82     	; 0x990 <__vector_11+0xba>
 93e:	80 91 e2 00 	lds	r24, 0x00E2
 942:	84 ff       	sbrs	r24, 4
 944:	25 c0       	rjmp	.+74     	; 0x990 <__vector_11+0xba>
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 946:	84 e0       	ldi	r24, 0x04	; 4
 948:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 94a:	89 b5       	in	r24, 0x29	; 41
 94c:	82 60       	ori	r24, 0x02	; 2
 94e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 950:	09 b4       	in	r0, 0x29	; 41
 952:	00 fe       	sbrs	r0, 0
 954:	fd cf       	rjmp	.-6      	; 0x950 <__vector_11+0x7a>
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 956:	80 91 d8 00 	lds	r24, 0x00D8
 95a:	8f 7d       	andi	r24, 0xDF	; 223
 95c:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 960:	80 91 e1 00 	lds	r24, 0x00E1
 964:	8f 7e       	andi	r24, 0xEF	; 239
 966:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
 96a:	80 91 e2 00 	lds	r24, 0x00E2
 96e:	8f 7e       	andi	r24, 0xEF	; 239
 970:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
 974:	80 91 e2 00 	lds	r24, 0x00E2
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	80 93 e2 00 	sts	0x00E2, r24
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 97e:	80 91 25 02 	lds	r24, 0x0225
 982:	88 23       	and	r24, r24
 984:	11 f4       	brne	.+4      	; 0x98a <__vector_11+0xb4>
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	01 c0       	rjmp	.+2      	; 0x98c <__vector_11+0xb6>
 98a:	84 e0       	ldi	r24, 0x04	; 4
 98c:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Connect();
 98e:	64 d1       	rcall	.+712    	; 0xc58 <USB_Event_Stub>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 990:	80 91 e1 00 	lds	r24, 0x00E1
 994:	83 ff       	sbrs	r24, 3
 996:	27 c0       	rjmp	.+78     	; 0x9e6 <__vector_11+0x110>
 998:	80 91 e2 00 	lds	r24, 0x00E2
 99c:	83 ff       	sbrs	r24, 3
 99e:	23 c0       	rjmp	.+70     	; 0x9e6 <__vector_11+0x110>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 9a0:	80 91 e1 00 	lds	r24, 0x00E1
 9a4:	87 7f       	andi	r24, 0xF7	; 247
 9a6:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 9aa:	82 e0       	ldi	r24, 0x02	; 2
 9ac:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
 9ae:	10 92 25 02 	sts	0x0225, r1

		USB_INT_Clear(USB_INT_SUSPEND);
 9b2:	80 91 e1 00 	lds	r24, 0x00E1
 9b6:	8e 7f       	andi	r24, 0xFE	; 254
 9b8:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
 9bc:	80 91 e2 00 	lds	r24, 0x00E2
 9c0:	8e 7f       	andi	r24, 0xFE	; 254
 9c2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
 9c6:	80 91 e2 00 	lds	r24, 0x00E2
 9ca:	80 61       	ori	r24, 0x10	; 16
 9cc:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
 9d0:	aa dd       	rcall	.-1196   	; 0x526 <Endpoint_ClearEndpoints>
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	42 e0       	ldi	r20, 0x02	; 2
 9d8:	93 dd       	rcall	.-1242   	; 0x500 <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
 9da:	80 91 f0 00 	lds	r24, 0x00F0
 9de:	88 60       	ori	r24, 0x08	; 8
 9e0:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
 9e4:	39 d1       	rcall	.+626    	; 0xc58 <USB_Event_Stub>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 9e6:	80 91 e1 00 	lds	r24, 0x00E1
 9ea:	82 ff       	sbrs	r24, 2
 9ec:	0a c0       	rjmp	.+20     	; 0xa02 <__vector_11+0x12c>
 9ee:	80 91 e2 00 	lds	r24, 0x00E2
 9f2:	82 ff       	sbrs	r24, 2
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <__vector_11+0x12c>
	{
		USB_INT_Clear(USB_INT_SOFI);
 9f6:	80 91 e1 00 	lds	r24, 0x00E1
 9fa:	8b 7f       	andi	r24, 0xFB	; 251
 9fc:	80 93 e1 00 	sts	0x00E1, r24
		
		EVENT_USB_Device_StartOfFrame();
 a00:	2b d1       	rcall	.+598    	; 0xc58 <USB_Event_Stub>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 a02:	ff 91       	pop	r31
 a04:	ef 91       	pop	r30
 a06:	bf 91       	pop	r27
 a08:	af 91       	pop	r26
 a0a:	9f 91       	pop	r25
 a0c:	8f 91       	pop	r24
 a0e:	7f 91       	pop	r23
 a10:	6f 91       	pop	r22
 a12:	5f 91       	pop	r21
 a14:	4f 91       	pop	r20
 a16:	3f 91       	pop	r19
 a18:	2f 91       	pop	r18
 a1a:	0f 90       	pop	r0
 a1c:	0f be       	out	0x3f, r0	; 63
 a1e:	0f 90       	pop	r0
 a20:	1f 90       	pop	r1
 a22:	18 95       	reti

00000a24 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a24:	1f 93       	push	r17
 a26:	df 93       	push	r29
 a28:	cf 93       	push	r28
 a2a:	00 d0       	rcall	.+0      	; 0xa2c <USB_Device_ProcessControlRequest+0x8>
 a2c:	cd b7       	in	r28, 0x3d	; 61
 a2e:	de b7       	in	r29, 0x3e	; 62
 a30:	e7 e2       	ldi	r30, 0x27	; 39
 a32:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 a34:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 a38:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a3a:	82 e0       	ldi	r24, 0x02	; 2
 a3c:	ef 32       	cpi	r30, 0x2F	; 47
 a3e:	f8 07       	cpc	r31, r24
 a40:	c9 f7       	brne	.-14     	; 0xa34 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a42:	80 91 27 02 	lds	r24, 0x0227
	
	switch (USB_ControlRequest.bRequest)
 a46:	30 91 28 02 	lds	r19, 0x0228
 a4a:	35 30       	cpi	r19, 0x05	; 5
 a4c:	09 f4       	brne	.+2      	; 0xa50 <USB_Device_ProcessControlRequest+0x2c>
 a4e:	87 c0       	rjmp	.+270    	; 0xb5e <USB_Device_ProcessControlRequest+0x13a>
 a50:	36 30       	cpi	r19, 0x06	; 6
 a52:	40 f4       	brcc	.+16     	; 0xa64 <USB_Device_ProcessControlRequest+0x40>
 a54:	31 30       	cpi	r19, 0x01	; 1
 a56:	c9 f1       	breq	.+114    	; 0xaca <USB_Device_ProcessControlRequest+0xa6>
 a58:	31 30       	cpi	r19, 0x01	; 1
 a5a:	70 f0       	brcs	.+28     	; 0xa78 <USB_Device_ProcessControlRequest+0x54>
 a5c:	33 30       	cpi	r19, 0x03	; 3
 a5e:	09 f0       	breq	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0x3e>
 a60:	e6 c0       	rjmp	.+460    	; 0xc2e <USB_Device_ProcessControlRequest+0x20a>
 a62:	33 c0       	rjmp	.+102    	; 0xaca <USB_Device_ProcessControlRequest+0xa6>
 a64:	38 30       	cpi	r19, 0x08	; 8
 a66:	09 f4       	brne	.+2      	; 0xa6a <USB_Device_ProcessControlRequest+0x46>
 a68:	b8 c0       	rjmp	.+368    	; 0xbda <USB_Device_ProcessControlRequest+0x1b6>
 a6a:	39 30       	cpi	r19, 0x09	; 9
 a6c:	09 f4       	brne	.+2      	; 0xa70 <USB_Device_ProcessControlRequest+0x4c>
 a6e:	c7 c0       	rjmp	.+398    	; 0xbfe <USB_Device_ProcessControlRequest+0x1da>
 a70:	36 30       	cpi	r19, 0x06	; 6
 a72:	09 f0       	breq	.+2      	; 0xa76 <USB_Device_ProcessControlRequest+0x52>
 a74:	dc c0       	rjmp	.+440    	; 0xc2e <USB_Device_ProcessControlRequest+0x20a>
 a76:	92 c0       	rjmp	.+292    	; 0xb9c <USB_Device_ProcessControlRequest+0x178>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a78:	80 38       	cpi	r24, 0x80	; 128
 a7a:	21 f0       	breq	.+8      	; 0xa84 <USB_Device_ProcessControlRequest+0x60>
 a7c:	82 38       	cpi	r24, 0x82	; 130
 a7e:	09 f0       	breq	.+2      	; 0xa82 <USB_Device_ProcessControlRequest+0x5e>
 a80:	d6 c0       	rjmp	.+428    	; 0xc2e <USB_Device_ProcessControlRequest+0x20a>
 a82:	08 c0       	rjmp	.+16     	; 0xa94 <USB_Device_ProcessControlRequest+0x70>
 a84:	90 91 23 02 	lds	r25, 0x0223
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
	#endif

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
			if (USB_RemoteWakeupEnabled)
 a88:	80 91 24 02 	lds	r24, 0x0224
 a8c:	88 23       	and	r24, r24
 a8e:	99 f0       	breq	.+38     	; 0xab6 <USB_Device_ProcessControlRequest+0x92>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a90:	92 60       	ori	r25, 0x02	; 2
 a92:	11 c0       	rjmp	.+34     	; 0xab6 <USB_Device_ProcessControlRequest+0x92>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a94:	80 91 2b 02 	lds	r24, 0x022B
 a98:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a9a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a9e:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	25 e0       	ldi	r18, 0x05	; 5
 aa6:	96 95       	lsr	r25
 aa8:	87 95       	ror	r24
 aaa:	2a 95       	dec	r18
 aac:	e1 f7       	brne	.-8      	; 0xaa6 <USB_Device_ProcessControlRequest+0x82>
 aae:	98 2f       	mov	r25, r24
 ab0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ab2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ab6:	80 91 e8 00 	lds	r24, 0x00E8
 aba:	87 7f       	andi	r24, 0xF7	; 247
 abc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 ac0:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 ac4:	10 92 f1 00 	sts	0x00F1, r1
 ac8:	93 c0       	rjmp	.+294    	; 0xbf0 <USB_Device_ProcessControlRequest+0x1cc>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 aca:	88 23       	and	r24, r24
 acc:	19 f0       	breq	.+6      	; 0xad4 <USB_Device_ProcessControlRequest+0xb0>
 ace:	82 30       	cpi	r24, 0x02	; 2
 ad0:	09 f0       	breq	.+2      	; 0xad4 <USB_Device_ProcessControlRequest+0xb0>
 ad2:	ad c0       	rjmp	.+346    	; 0xc2e <USB_Device_ProcessControlRequest+0x20a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	8f 71       	andi	r24, 0x1F	; 31
 ad8:	90 70       	andi	r25, 0x00	; 0
 ada:	00 97       	sbiw	r24, 0x00	; 0
 adc:	21 f0       	breq	.+8      	; 0xae6 <USB_Device_ProcessControlRequest+0xc2>
 ade:	02 97       	sbiw	r24, 0x02	; 2
 ae0:	09 f0       	breq	.+2      	; 0xae4 <USB_Device_ProcessControlRequest+0xc0>
 ae2:	a6 c0       	rjmp	.+332    	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
 ae4:	0c c0       	rjmp	.+24     	; 0xafe <USB_Device_ProcessControlRequest+0xda>
	{
#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
 ae6:	80 91 29 02 	lds	r24, 0x0229
 aea:	81 30       	cpi	r24, 0x01	; 1
 aec:	09 f0       	breq	.+2      	; 0xaf0 <USB_Device_ProcessControlRequest+0xcc>
 aee:	a0 c0       	rjmp	.+320    	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 af0:	10 92 24 02 	sts	0x0224, r1
 af4:	33 30       	cpi	r19, 0x03	; 3
 af6:	69 f5       	brne	.+90     	; 0xb52 <USB_Device_ProcessControlRequest+0x12e>
 af8:	80 93 24 02 	sts	0x0224, r24
 afc:	2a c0       	rjmp	.+84     	; 0xb52 <USB_Device_ProcessControlRequest+0x12e>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 afe:	80 91 29 02 	lds	r24, 0x0229
 b02:	88 23       	and	r24, r24
 b04:	31 f5       	brne	.+76     	; 0xb52 <USB_Device_ProcessControlRequest+0x12e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b06:	20 91 2b 02 	lds	r18, 0x022B
 b0a:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b0c:	09 f4       	brne	.+2      	; 0xb10 <USB_Device_ProcessControlRequest+0xec>
 b0e:	90 c0       	rjmp	.+288    	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b10:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b14:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 b18:	80 ff       	sbrs	r24, 0
 b1a:	8a c0       	rjmp	.+276    	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b1c:	33 30       	cpi	r19, 0x03	; 3
 b1e:	21 f4       	brne	.+8      	; 0xb28 <USB_Device_ProcessControlRequest+0x104>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b20:	80 91 eb 00 	lds	r24, 0x00EB
 b24:	80 62       	ori	r24, 0x20	; 32
 b26:	13 c0       	rjmp	.+38     	; 0xb4e <USB_Device_ProcessControlRequest+0x12a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b28:	80 91 eb 00 	lds	r24, 0x00EB
 b2c:	80 61       	ori	r24, 0x10	; 16
 b2e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <USB_Device_ProcessControlRequest+0x118>
 b38:	88 0f       	add	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	2a 95       	dec	r18
 b3e:	e2 f7       	brpl	.-8      	; 0xb38 <USB_Device_ProcessControlRequest+0x114>
 b40:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 b44:	10 92 ea 00 	sts	0x00EA, r1
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b48:	80 91 eb 00 	lds	r24, 0x00EB
 b4c:	88 60       	ori	r24, 0x08	; 8
 b4e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b52:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b56:	80 91 e8 00 	lds	r24, 0x00E8
 b5a:	87 7f       	andi	r24, 0xF7	; 247
 b5c:	4c c0       	rjmp	.+152    	; 0xbf6 <USB_Device_ProcessControlRequest+0x1d2>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b5e:	88 23       	and	r24, r24
 b60:	09 f0       	breq	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0x140>
 b62:	65 c0       	rjmp	.+202    	; 0xc2e <USB_Device_ProcessControlRequest+0x20a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b64:	10 91 29 02 	lds	r17, 0x0229
 b68:	80 91 e8 00 	lds	r24, 0x00E8
 b6c:	87 7f       	andi	r24, 0xF7	; 247
 b6e:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
 b72:	ed dc       	rcall	.-1574   	; 0x54e <Endpoint_ClearStatusStage>
 b74:	04 c0       	rjmp	.+8      	; 0xb7e <USB_Device_ProcessControlRequest+0x15a>
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 b76:	8e b3       	in	r24, 0x1e	; 30
 b78:	88 23       	and	r24, r24
 b7a:	09 f4       	brne	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0x15a>
 b7c:	59 c0       	rjmp	.+178    	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 b7e:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
 b82:	80 ff       	sbrs	r24, 0
 b84:	f8 cf       	rjmp	.-16     	; 0xb76 <USB_Device_ProcessControlRequest+0x152>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b86:	81 2f       	mov	r24, r17
 b88:	8f 77       	andi	r24, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b8a:	11 f4       	brne	.+4      	; 0xb90 <USB_Device_ProcessControlRequest+0x16c>
 b8c:	92 e0       	ldi	r25, 0x02	; 2
 b8e:	01 c0       	rjmp	.+2      	; 0xb92 <USB_Device_ProcessControlRequest+0x16e>
 b90:	93 e0       	ldi	r25, 0x03	; 3
 b92:	9e bb       	out	0x1e, r25	; 30
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 b94:	80 68       	ori	r24, 0x80	; 128
 b96:	80 93 e3 00 	sts	0x00E3, r24
 b9a:	4a c0       	rjmp	.+148    	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b9c:	80 58       	subi	r24, 0x80	; 128
 b9e:	82 30       	cpi	r24, 0x02	; 2
 ba0:	08 f0       	brcs	.+2      	; 0xba4 <USB_Device_ProcessControlRequest+0x180>
 ba2:	45 c0       	rjmp	.+138    	; 0xc2e <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ba4:	80 91 29 02 	lds	r24, 0x0229
 ba8:	90 91 2a 02 	lds	r25, 0x022A
 bac:	60 91 2b 02 	lds	r22, 0x022B
 bb0:	ae 01       	movw	r20, r28
 bb2:	4f 5f       	subi	r20, 0xFF	; 255
 bb4:	5f 4f       	sbci	r21, 0xFF	; 255
 bb6:	68 dc       	rcall	.-1840   	; 0x488 <CALLBACK_USB_GetDescriptor>
 bb8:	bc 01       	movw	r22, r24
 bba:	00 97       	sbiw	r24, 0x00	; 0
 bbc:	c9 f1       	breq	.+114    	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bbe:	80 91 e8 00 	lds	r24, 0x00E8
 bc2:	87 7f       	andi	r24, 0xF7	; 247
 bc4:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 bc8:	89 81       	ldd	r24, Y+1	; 0x01
 bca:	9a 81       	ldd	r25, Y+2	; 0x02
 bcc:	67 dd       	rcall	.-1330   	; 0x69c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bce:	80 91 e8 00 	lds	r24, 0x00E8
 bd2:	8b 77       	andi	r24, 0x7B	; 123
 bd4:	80 93 e8 00 	sts	0x00E8, r24
 bd8:	2b c0       	rjmp	.+86     	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bda:	80 38       	cpi	r24, 0x80	; 128
 bdc:	41 f5       	brne	.+80     	; 0xc2e <USB_Device_ProcessControlRequest+0x20a>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bde:	80 91 e8 00 	lds	r24, 0x00E8
 be2:	87 7f       	andi	r24, 0xF7	; 247
 be4:	80 93 e8 00 	sts	0x00E8, r24

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 be8:	80 91 25 02 	lds	r24, 0x0225
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 bec:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bf0:	80 91 e8 00 	lds	r24, 0x00E8
 bf4:	8e 77       	andi	r24, 0x7E	; 126
 bf6:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bfa:	a9 dc       	rcall	.-1710   	; 0x54e <Endpoint_ClearStatusStage>
 bfc:	19 c0       	rjmp	.+50     	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bfe:	88 23       	and	r24, r24
 c00:	b1 f4       	brne	.+44     	; 0xc2e <USB_Device_ProcessControlRequest+0x20a>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c02:	90 91 29 02 	lds	r25, 0x0229
 c06:	92 30       	cpi	r25, 0x02	; 2
 c08:	98 f4       	brcc	.+38     	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c0a:	80 91 e8 00 	lds	r24, 0x00E8
 c0e:	87 7f       	andi	r24, 0xF7	; 247
 c10:	80 93 e8 00 	sts	0x00E8, r24
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c14:	90 93 25 02 	sts	0x0225, r25

	Endpoint_ClearStatusStage();
 c18:	9a dc       	rcall	.-1740   	; 0x54e <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 c1a:	80 91 25 02 	lds	r24, 0x0225
 c1e:	88 23       	and	r24, r24
 c20:	11 f4       	brne	.+4      	; 0xc26 <USB_Device_ProcessControlRequest+0x202>
 c22:	83 e0       	ldi	r24, 0x03	; 3
 c24:	01 c0       	rjmp	.+2      	; 0xc28 <USB_Device_ProcessControlRequest+0x204>
 c26:	84 e0       	ldi	r24, 0x04	; 4
 c28:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 c2a:	3a db       	rcall	.-2444   	; 0x2a0 <EVENT_USB_Device_ConfigurationChanged>
 c2c:	01 c0       	rjmp	.+2      	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
 c2e:	35 db       	rcall	.-2454   	; 0x29a <EVENT_USB_Device_UnhandledControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c30:	80 91 e8 00 	lds	r24, 0x00E8
	  
	if (Endpoint_IsSETUPReceived())
 c34:	83 ff       	sbrs	r24, 3
 c36:	0a c0       	rjmp	.+20     	; 0xc4c <USB_Device_ProcessControlRequest+0x228>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c38:	80 91 eb 00 	lds	r24, 0x00EB
 c3c:	80 62       	ori	r24, 0x20	; 32
 c3e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c42:	80 91 e8 00 	lds	r24, 0x00E8
 c46:	87 7f       	andi	r24, 0xF7	; 247
 c48:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
 c4c:	0f 90       	pop	r0
 c4e:	0f 90       	pop	r0
 c50:	cf 91       	pop	r28
 c52:	df 91       	pop	r29
 c54:	1f 91       	pop	r17
 c56:	08 95       	ret

00000c58 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c58:	08 95       	ret

00000c5a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c5a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c5c:	8e b3       	in	r24, 0x1e	; 30
 c5e:	88 23       	and	r24, r24
 c60:	61 f0       	breq	.+24     	; 0xc7a <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c62:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c66:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c6a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c6e:	83 ff       	sbrs	r24, 3
 c70:	01 c0       	rjmp	.+2      	; 0xc74 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
 c72:	d8 de       	rcall	.-592    	; 0xa24 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c74:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c76:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
 c7a:	1f 91       	pop	r17
 c7c:	08 95       	ret

00000c7e <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
 c7e:	08 95       	ret

00000c80 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c80:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c82:	8e b3       	in	r24, 0x1e	; 30
 c84:	84 30       	cpi	r24, 0x04	; 4
 c86:	21 f5       	brne	.+72     	; 0xcd0 <CDC_Device_ReceiveByte+0x50>
 c88:	87 85       	ldd	r24, Z+15	; 0x0f
 c8a:	90 89       	ldd	r25, Z+16	; 0x10
 c8c:	a1 89       	ldd	r26, Z+17	; 0x11
 c8e:	b2 89       	ldd	r27, Z+18	; 0x12
 c90:	00 97       	sbiw	r24, 0x00	; 0
 c92:	a1 05       	cpc	r26, r1
 c94:	b1 05       	cpc	r27, r1
 c96:	e1 f0       	breq	.+56     	; 0xcd0 <CDC_Device_ReceiveByte+0x50>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 c98:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c9a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c9e:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsOUTReceived())
 ca2:	82 ff       	sbrs	r24, 2
 ca4:	15 c0       	rjmp	.+42     	; 0xcd0 <CDC_Device_ReceiveByte+0x50>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 ca6:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
 caa:	88 23       	and	r24, r24
 cac:	19 f4       	brne	.+6      	; 0xcb4 <CDC_Device_ReceiveByte+0x34>
 cae:	2f ef       	ldi	r18, 0xFF	; 255
 cb0:	3f ef       	ldi	r19, 0xFF	; 255
 cb2:	04 c0       	rjmp	.+8      	; 0xcbc <CDC_Device_ReceiveByte+0x3c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 cb4:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_Byte();
 cb8:	28 2f       	mov	r18, r24
 cba:	30 e0       	ldi	r19, 0x00	; 0
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 cbc:	80 91 f2 00 	lds	r24, 0x00F2
	
		if (!(Endpoint_BytesInEndpoint()))
 cc0:	88 23       	and	r24, r24
 cc2:	41 f4       	brne	.+16     	; 0xcd4 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cc4:	80 91 e8 00 	lds	r24, 0x00E8
 cc8:	8b 77       	andi	r24, 0x7B	; 123
 cca:	80 93 e8 00 	sts	0x00E8, r24
 cce:	02 c0       	rjmp	.+4      	; 0xcd4 <CDC_Device_ReceiveByte+0x54>
 cd0:	2f ef       	ldi	r18, 0xFF	; 255
 cd2:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}
	
	return ReceivedByte;
}
 cd4:	c9 01       	movw	r24, r18
 cd6:	08 95       	ret

00000cd8 <CDC_Device_Flush>:
	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cd8:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 cda:	8e b3       	in	r24, 0x1e	; 30
 cdc:	84 30       	cpi	r24, 0x04	; 4
 cde:	11 f5       	brne	.+68     	; 0xd24 <CDC_Device_Flush+0x4c>
 ce0:	87 85       	ldd	r24, Z+15	; 0x0f
 ce2:	90 89       	ldd	r25, Z+16	; 0x10
 ce4:	a1 89       	ldd	r26, Z+17	; 0x11
 ce6:	b2 89       	ldd	r27, Z+18	; 0x12
 ce8:	00 97       	sbiw	r24, 0x00	; 0
 cea:	a1 05       	cpc	r26, r1
 cec:	b1 05       	cpc	r27, r1
 cee:	d1 f0       	breq	.+52     	; 0xd24 <CDC_Device_Flush+0x4c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 cf0:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cf2:	80 93 e9 00 	sts	0x00E9, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 cf6:	80 91 f2 00 	lds	r24, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
 cfa:	88 23       	and	r24, r24
 cfc:	a9 f0       	breq	.+42     	; 0xd28 <CDC_Device_Flush+0x50>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 cfe:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d02:	80 91 e8 00 	lds	r24, 0x00E8
 d06:	8e 77       	andi	r24, 0x7E	; 126
 d08:	80 93 e8 00 	sts	0x00E8, r24
	
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
	
	Endpoint_ClearIN();
	
	if (BankFull)
 d0c:	95 fd       	sbrc	r25, 5
 d0e:	0c c0       	rjmp	.+24     	; 0xd28 <CDC_Device_Flush+0x50>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d10:	3d dc       	rcall	.-1926   	; 0x58c <Endpoint_WaitUntilReady>
 d12:	98 2f       	mov	r25, r24
 d14:	88 23       	and	r24, r24
 d16:	49 f4       	brne	.+18     	; 0xd2a <CDC_Device_Flush+0x52>
 d18:	80 91 e8 00 	lds	r24, 0x00E8
 d1c:	8e 77       	andi	r24, 0x7E	; 126
 d1e:	80 93 e8 00 	sts	0x00E8, r24
 d22:	03 c0       	rjmp	.+6      	; 0xd2a <CDC_Device_Flush+0x52>
 d24:	92 e0       	ldi	r25, 0x02	; 2
 d26:	01 c0       	rjmp	.+2      	; 0xd2a <CDC_Device_Flush+0x52>
 d28:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}
	
	return ENDPOINT_READYWAIT_NoError;
}
 d2a:	89 2f       	mov	r24, r25
 d2c:	08 95       	ret

00000d2e <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d2e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d30:	8e b3       	in	r24, 0x1e	; 30
 d32:	84 30       	cpi	r24, 0x04	; 4
 d34:	51 f4       	brne	.+20     	; 0xd4a <CDC_Device_USBTask+0x1c>
 d36:	87 85       	ldd	r24, Z+15	; 0x0f
 d38:	90 89       	ldd	r25, Z+16	; 0x10
 d3a:	a1 89       	ldd	r26, Z+17	; 0x11
 d3c:	b2 89       	ldd	r27, Z+18	; 0x12
 d3e:	00 97       	sbiw	r24, 0x00	; 0
 d40:	a1 05       	cpc	r26, r1
 d42:	b1 05       	cpc	r27, r1
 d44:	11 f0       	breq	.+4      	; 0xd4a <CDC_Device_USBTask+0x1c>
	  return;
	  
	CDC_Device_Flush(CDCInterfaceInfo);
 d46:	cf 01       	movw	r24, r30
 d48:	c7 cf       	rjmp	.-114    	; 0xcd8 <CDC_Device_Flush>
 d4a:	08 95       	ret

00000d4c <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 d4c:	1f 93       	push	r17
 d4e:	fc 01       	movw	r30, r24
 d50:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d52:	8e b3       	in	r24, 0x1e	; 30
 d54:	84 30       	cpi	r24, 0x04	; 4
 d56:	d9 f4       	brne	.+54     	; 0xd8e <CDC_Device_SendByte+0x42>
 d58:	87 85       	ldd	r24, Z+15	; 0x0f
 d5a:	90 89       	ldd	r25, Z+16	; 0x10
 d5c:	a1 89       	ldd	r26, Z+17	; 0x11
 d5e:	b2 89       	ldd	r27, Z+18	; 0x12
 d60:	00 97       	sbiw	r24, 0x00	; 0
 d62:	a1 05       	cpc	r26, r1
 d64:	b1 05       	cpc	r27, r1
 d66:	99 f0       	breq	.+38     	; 0xd8e <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 d68:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d6a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d6e:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 d72:	85 fd       	sbrc	r24, 5
 d74:	08 c0       	rjmp	.+16     	; 0xd86 <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d76:	80 91 e8 00 	lds	r24, 0x00E8
 d7a:	8e 77       	andi	r24, 0x7E	; 126
 d7c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d80:	05 dc       	rcall	.-2038   	; 0x58c <Endpoint_WaitUntilReady>
 d82:	88 23       	and	r24, r24
 d84:	29 f4       	brne	.+10     	; 0xd90 <CDC_Device_SendByte+0x44>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 d86:	10 93 f1 00 	sts	0x00F1, r17
 d8a:	80 e0       	ldi	r24, 0x00	; 0
 d8c:	01 c0       	rjmp	.+2      	; 0xd90 <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
 d8e:	82 e0       	ldi	r24, 0x02	; 2
}
 d90:	1f 91       	pop	r17
 d92:	08 95       	ret

00000d94 <Endpoint_ConfigureEndpointDynamic>:
			static inline bool Endpoint_ConfigureEndpointDynamic(const uint8_t Number,
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
 d94:	ef 92       	push	r14
 d96:	ff 92       	push	r15
 d98:	0f 93       	push	r16
 d9a:	1f 93       	push	r17
 d9c:	e8 2e       	mov	r14, r24
 d9e:	16 2f       	mov	r17, r22
 da0:	f4 2e       	mov	r15, r20
 da2:	c9 01       	movw	r24, r18
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 da4:	9f db       	rcall	.-2242   	; 0x4e4 <Endpoint_BytesToEPSizeMaskDynamic>
 da6:	12 95       	swap	r17
 da8:	11 0f       	add	r17, r17
 daa:	11 0f       	add	r17, r17
 dac:	10 7c       	andi	r17, 0xC0	; 192
 dae:	1f 29       	or	r17, r15
 db0:	48 2f       	mov	r20, r24
 db2:	42 60       	ori	r20, 0x02	; 2
 db4:	40 2b       	or	r20, r16
 db6:	8e 2d       	mov	r24, r14
 db8:	61 2f       	mov	r22, r17
 dba:	a2 db       	rcall	.-2236   	; 0x500 <Endpoint_ConfigureEndpoint_Prv>
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
			}
 dbc:	1f 91       	pop	r17
 dbe:	0f 91       	pop	r16
 dc0:	ff 90       	pop	r15
 dc2:	ef 90       	pop	r14
 dc4:	08 95       	ret

00000dc6 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 dc6:	0f 93       	push	r16
 dc8:	cf 93       	push	r28
 dca:	df 93       	push	r29
 dcc:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 dce:	0d 96       	adiw	r24, 0x0d	; 13
 dd0:	fc 01       	movw	r30, r24
 dd2:	89 e0       	ldi	r24, 0x09	; 9
 dd4:	df 01       	movw	r26, r30
 dd6:	1d 92       	st	X+, r1
 dd8:	8a 95       	dec	r24
 dda:	e9 f7       	brne	.-6      	; 0xdd6 <CDC_Device_ConfigureEndpoints+0x10>

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
 ddc:	2a 81       	ldd	r18, Y+2	; 0x02
 dde:	3b 81       	ldd	r19, Y+3	; 0x03
 de0:	99 81       	ldd	r25, Y+1	; 0x01
 de2:	8c 81       	ldd	r24, Y+4	; 0x04
 de4:	88 23       	and	r24, r24
 de6:	11 f4       	brne	.+4      	; 0xdec <CDC_Device_ConfigureEndpoints+0x26>
 de8:	00 e0       	ldi	r16, 0x00	; 0
 dea:	01 c0       	rjmp	.+2      	; 0xdee <CDC_Device_ConfigureEndpoints+0x28>
 dec:	04 e0       	ldi	r16, 0x04	; 4
 dee:	89 2f       	mov	r24, r25
 df0:	62 e0       	ldi	r22, 0x02	; 2
 df2:	41 e0       	ldi	r20, 0x01	; 1
 df4:	cf df       	rcall	.-98     	; 0xd94 <Endpoint_ConfigureEndpointDynamic>
 df6:	88 23       	and	r24, r24
 df8:	e9 f0       	breq	.+58     	; 0xe34 <CDC_Device_ConfigureEndpoints+0x6e>
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
 dfa:	2e 81       	ldd	r18, Y+6	; 0x06
 dfc:	3f 81       	ldd	r19, Y+7	; 0x07
 dfe:	9d 81       	ldd	r25, Y+5	; 0x05
 e00:	88 85       	ldd	r24, Y+8	; 0x08
 e02:	88 23       	and	r24, r24
 e04:	11 f4       	brne	.+4      	; 0xe0a <CDC_Device_ConfigureEndpoints+0x44>
 e06:	00 e0       	ldi	r16, 0x00	; 0
 e08:	01 c0       	rjmp	.+2      	; 0xe0c <CDC_Device_ConfigureEndpoints+0x46>
 e0a:	04 e0       	ldi	r16, 0x04	; 4
 e0c:	89 2f       	mov	r24, r25
 e0e:	62 e0       	ldi	r22, 0x02	; 2
 e10:	40 e0       	ldi	r20, 0x00	; 0
 e12:	c0 df       	rcall	.-128    	; 0xd94 <Endpoint_ConfigureEndpointDynamic>
 e14:	88 23       	and	r24, r24
 e16:	71 f0       	breq	.+28     	; 0xe34 <CDC_Device_ConfigureEndpoints+0x6e>
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
 e18:	2a 85       	ldd	r18, Y+10	; 0x0a
 e1a:	3b 85       	ldd	r19, Y+11	; 0x0b
 e1c:	99 85       	ldd	r25, Y+9	; 0x09
 e1e:	8c 85       	ldd	r24, Y+12	; 0x0c
 e20:	88 23       	and	r24, r24
 e22:	11 f4       	brne	.+4      	; 0xe28 <CDC_Device_ConfigureEndpoints+0x62>
 e24:	00 e0       	ldi	r16, 0x00	; 0
 e26:	01 c0       	rjmp	.+2      	; 0xe2a <CDC_Device_ConfigureEndpoints+0x64>
 e28:	04 e0       	ldi	r16, 0x04	; 4
 e2a:	89 2f       	mov	r24, r25
 e2c:	63 e0       	ldi	r22, 0x03	; 3
 e2e:	41 e0       	ldi	r20, 0x01	; 1
 e30:	b1 df       	rcall	.-158    	; 0xd94 <Endpoint_ConfigureEndpointDynamic>
 e32:	01 c0       	rjmp	.+2      	; 0xe36 <CDC_Device_ConfigureEndpoints+0x70>
 e34:	80 e0       	ldi	r24, 0x00	; 0
	{
		return false;
	}

	return true;
}
 e36:	df 91       	pop	r29
 e38:	cf 91       	pop	r28
 e3a:	0f 91       	pop	r16
 e3c:	08 95       	ret

00000e3e <CDC_Device_ProcessControlRequest>:
{

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e3e:	cf 93       	push	r28
 e40:	df 93       	push	r29
 e42:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e44:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 e48:	83 ff       	sbrs	r24, 3
 e4a:	60 c0       	rjmp	.+192    	; 0xf0c <CDC_Device_ProcessControlRequest+0xce>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 e4c:	88 81       	ld	r24, Y
 e4e:	90 e0       	ldi	r25, 0x00	; 0
 e50:	20 91 2b 02 	lds	r18, 0x022B
 e54:	30 91 2c 02 	lds	r19, 0x022C
 e58:	28 17       	cp	r18, r24
 e5a:	39 07       	cpc	r19, r25
 e5c:	09 f0       	breq	.+2      	; 0xe60 <CDC_Device_ProcessControlRequest+0x22>
 e5e:	56 c0       	rjmp	.+172    	; 0xf0c <CDC_Device_ProcessControlRequest+0xce>
	  return;

	switch (USB_ControlRequest.bRequest)
 e60:	80 91 28 02 	lds	r24, 0x0228
 e64:	81 32       	cpi	r24, 0x21	; 33
 e66:	61 f0       	breq	.+24     	; 0xe80 <CDC_Device_ProcessControlRequest+0x42>
 e68:	82 32       	cpi	r24, 0x22	; 34
 e6a:	20 f4       	brcc	.+8      	; 0xe74 <CDC_Device_ProcessControlRequest+0x36>
 e6c:	80 32       	cpi	r24, 0x20	; 32
 e6e:	09 f0       	breq	.+2      	; 0xe72 <CDC_Device_ProcessControlRequest+0x34>
 e70:	4d c0       	rjmp	.+154    	; 0xf0c <CDC_Device_ProcessControlRequest+0xce>
 e72:	19 c0       	rjmp	.+50     	; 0xea6 <CDC_Device_ProcessControlRequest+0x68>
 e74:	82 32       	cpi	r24, 0x22	; 34
 e76:	69 f1       	breq	.+90     	; 0xed2 <CDC_Device_ProcessControlRequest+0x94>
 e78:	83 32       	cpi	r24, 0x23	; 35
 e7a:	09 f0       	breq	.+2      	; 0xe7e <CDC_Device_ProcessControlRequest+0x40>
 e7c:	47 c0       	rjmp	.+142    	; 0xf0c <CDC_Device_ProcessControlRequest+0xce>
 e7e:	38 c0       	rjmp	.+112    	; 0xef0 <CDC_Device_ProcessControlRequest+0xb2>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 e80:	80 91 27 02 	lds	r24, 0x0227
 e84:	81 3a       	cpi	r24, 0xA1	; 161
 e86:	09 f0       	breq	.+2      	; 0xe8a <CDC_Device_ProcessControlRequest+0x4c>
 e88:	41 c0       	rjmp	.+130    	; 0xf0c <CDC_Device_ProcessControlRequest+0xce>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e8a:	80 91 e8 00 	lds	r24, 0x00E8
 e8e:	87 7f       	andi	r24, 0xF7	; 247
 e90:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 e94:	ce 01       	movw	r24, r28
 e96:	0f 96       	adiw	r24, 0x0f	; 15
 e98:	67 e0       	ldi	r22, 0x07	; 7
 e9a:	70 e0       	ldi	r23, 0x00	; 0
 e9c:	a6 db       	rcall	.-2228   	; 0x5ea <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e9e:	80 91 e8 00 	lds	r24, 0x00E8
 ea2:	8b 77       	andi	r24, 0x7B	; 123
 ea4:	13 c0       	rjmp	.+38     	; 0xecc <CDC_Device_ProcessControlRequest+0x8e>
				Endpoint_ClearOUT();
			}
			
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ea6:	80 91 27 02 	lds	r24, 0x0227
 eaa:	81 32       	cpi	r24, 0x21	; 33
 eac:	79 f5       	brne	.+94     	; 0xf0c <CDC_Device_ProcessControlRequest+0xce>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 eae:	80 91 e8 00 	lds	r24, 0x00E8
 eb2:	87 7f       	andi	r24, 0xF7	; 247
 eb4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 eb8:	ce 01       	movw	r24, r28
 eba:	0f 96       	adiw	r24, 0x0f	; 15
 ebc:	67 e0       	ldi	r22, 0x07	; 7
 ebe:	70 e0       	ldi	r23, 0x00	; 0
 ec0:	48 dc       	rcall	.-1904   	; 0x752 <Endpoint_Read_Control_Stream_LE>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 ec2:	ce 01       	movw	r24, r28
 ec4:	44 d9       	rcall	.-3448   	; 0x14e <EVENT_CDC_Device_LineEncodingChanged>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ec6:	80 91 e8 00 	lds	r24, 0x00E8
 eca:	8e 77       	andi	r24, 0x7E	; 126
 ecc:	80 93 e8 00 	sts	0x00E8, r24
 ed0:	1d c0       	rjmp	.+58     	; 0xf0c <CDC_Device_ProcessControlRequest+0xce>
				Endpoint_ClearIN();
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ed2:	80 91 27 02 	lds	r24, 0x0227
 ed6:	81 32       	cpi	r24, 0x21	; 33
 ed8:	c9 f4       	brne	.+50     	; 0xf0c <CDC_Device_ProcessControlRequest+0xce>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 eda:	80 91 e8 00 	lds	r24, 0x00E8
 ede:	87 7f       	andi	r24, 0xF7	; 247
 ee0:	80 93 e8 00 	sts	0x00E8, r24
			{				
				Endpoint_ClearSETUP();
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 ee4:	80 91 29 02 	lds	r24, 0x0229
 ee8:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 eea:	ce 01       	movw	r24, r28
 eec:	ce d9       	rcall	.-3172   	; 0x28a <EVENT_CDC_Device_ControLineStateChanged>
 eee:	0d c0       	rjmp	.+26     	; 0xf0a <CDC_Device_ProcessControlRequest+0xcc>
				Endpoint_ClearStatusStage();
			}
	
			break;
		case REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ef0:	80 91 27 02 	lds	r24, 0x0227
 ef4:	81 32       	cpi	r24, 0x21	; 33
 ef6:	51 f4       	brne	.+20     	; 0xf0c <CDC_Device_ProcessControlRequest+0xce>
 ef8:	80 91 e8 00 	lds	r24, 0x00E8
 efc:	87 7f       	andi	r24, 0xF7	; 247
 efe:	80 93 e8 00 	sts	0x00E8, r24
			{				
				Endpoint_ClearSETUP();
				
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f02:	ce 01       	movw	r24, r28
 f04:	60 91 29 02 	lds	r22, 0x0229
 f08:	ba de       	rcall	.-652    	; 0xc7e <CDC_Device_Event_Stub>

				Endpoint_ClearStatusStage();
 f0a:	21 db       	rcall	.-2494   	; 0x54e <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 f0c:	df 91       	pop	r29
 f0e:	cf 91       	pop	r28
 f10:	08 95       	ret

00000f12 <__udivmodsi4>:
 f12:	a1 e2       	ldi	r26, 0x21	; 33
 f14:	1a 2e       	mov	r1, r26
 f16:	aa 1b       	sub	r26, r26
 f18:	bb 1b       	sub	r27, r27
 f1a:	fd 01       	movw	r30, r26
 f1c:	0d c0       	rjmp	.+26     	; 0xf38 <__udivmodsi4_ep>

00000f1e <__udivmodsi4_loop>:
 f1e:	aa 1f       	adc	r26, r26
 f20:	bb 1f       	adc	r27, r27
 f22:	ee 1f       	adc	r30, r30
 f24:	ff 1f       	adc	r31, r31
 f26:	a2 17       	cp	r26, r18
 f28:	b3 07       	cpc	r27, r19
 f2a:	e4 07       	cpc	r30, r20
 f2c:	f5 07       	cpc	r31, r21
 f2e:	20 f0       	brcs	.+8      	; 0xf38 <__udivmodsi4_ep>
 f30:	a2 1b       	sub	r26, r18
 f32:	b3 0b       	sbc	r27, r19
 f34:	e4 0b       	sbc	r30, r20
 f36:	f5 0b       	sbc	r31, r21

00000f38 <__udivmodsi4_ep>:
 f38:	66 1f       	adc	r22, r22
 f3a:	77 1f       	adc	r23, r23
 f3c:	88 1f       	adc	r24, r24
 f3e:	99 1f       	adc	r25, r25
 f40:	1a 94       	dec	r1
 f42:	69 f7       	brne	.-38     	; 0xf1e <__udivmodsi4_loop>
 f44:	60 95       	com	r22
 f46:	70 95       	com	r23
 f48:	80 95       	com	r24
 f4a:	90 95       	com	r25
 f4c:	9b 01       	movw	r18, r22
 f4e:	ac 01       	movw	r20, r24
 f50:	bd 01       	movw	r22, r26
 f52:	cf 01       	movw	r24, r30
 f54:	08 95       	ret

00000f56 <_exit>:
 f56:	f8 94       	cli

00000f58 <__stop_program>:
 f58:	ff cf       	rjmp	.-2      	; 0xf58 <__stop_program>
